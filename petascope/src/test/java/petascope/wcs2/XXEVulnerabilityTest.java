/*
 * This file is part of rasdaman community.
 *
 * Rasdaman community is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Rasdaman community is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU  General Public License for more details.
 *
 * You should have received a copy of the GNU  General Public License
 * along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Copyright 2003 - 2014 Peter Baumann / rasdaman GmbH.
 *
 * For more information please see <http://www.rasdaman.org>
 * or contact Peter Baumann via <baumann@rasdaman.com>.
 */
package petascope.wcs2;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;

import nu.xom.Document;
import nu.xom.Element;
import org.junit.After;

import static org.junit.Assert.assertFalse;

import org.junit.Before;
import org.junit.Test;
import petascope.exceptions.ExceptionCode;
import petascope.exceptions.WCSException;

import static petascope.util.XMLSymbols.ATT_SERVICE;
import static petascope.util.XMLSymbols.ATT_VERSION;

import petascope.util.XMLUtil;
import petascope.wcs2.parsers.BaseRequest;

/**
 * @author rasdaman
 */
public class XXEVulnerabilityTest {

    private final String STRING_FROM_FILE = "teststring";
    File file = new File("/tmp/file_test.txt");

    public XXEVulnerabilityTest() {
    }

    @Before
    public void setUp() throws FileNotFoundException, UnsupportedEncodingException, IOException {

        FileWriter filewriter = new FileWriter(file, true);
        filewriter.write(STRING_FROM_FILE);
        filewriter.close();
    }

    @After
    public void tearDown() throws IOException {
        //delete file
        try {
            file.delete();
        } catch (SecurityException e) {
            System.err.println(e);
        }
    }

    /**
     * Test of testXML method, of class XXEVulnerabilityTest. The method should
     * be made public before running the test
     *
     * @throws java.lang.Exception
     */
    @Test
    public void testXML() throws Exception {

        String input = "<?xml version=\"1.0\" ?>\n"
                + "<!DOCTYPE passwd [\n"
                + "  <!ELEMENT passwd ANY>\n"
                + "  <!ENTITY passwd SYSTEM \"file:///tmp/file_test.txt\">\n"
                + "]>\n"
                + "<passwd>&passwd;</passwd>";
        try {
            Document doc = XMLUtil.buildDocument(null, input);
            Element root = doc.getRootElement();
            String service = root.getAttributeValue(ATT_SERVICE);
            String version = root.getAttributeValue(ATT_VERSION);
            if ((service != null && !service.equals(BaseRequest.SERVICE))
                    || (version != null && !version.matches(BaseRequest.VERSION))) {
                throw new WCSException(ExceptionCode.VersionNegotiationFailed, "Service/Version not supported.");
            }
            String root_value = root.getValue();
            // if it contains string_from_file then its not fix.
            // if it doesnt contain, it is fixed.
            assertFalse(root_value.contains(STRING_FROM_FILE));
        } catch (Exception ex) {
            throw new WCSException(ExceptionCode.XmlNotValid, "Failed parsing into XML:\n" + input, ex);
        }

    }

}
