#!/bin/bash
#
# This file is part of rasdaman community.
#
# NOTE: This file contains rasdaman enterprise only additions, marked as
# such with begin/end comments as follows:
# Begin/End ENTERPRISE only part (purpose/notes)
#
# Rasdaman community is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Rasdaman community is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rasdaman community.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2003, 2004, 2005, 2006, 2007, 2008, 2009 Peter Baumann /
# rasdaman GmbH.
#
# For more information please see <http://www.rasdaman.org>
# or contact Peter Baumann via <baumann@rasdaman.com>.
#
# ------------------------------------------------------------------------------
#
# SYNOPSIS
# ./update_petascopedb.sh [--revert] [--cleanup] [--help]
#
# Description
#  Command-line utility for updating the petascope database. The updating is
#  done by importing all appropriate updateX.sql files to postgres. The script
#  determines automatically which updates need to be imported. There are two
#  cases:
#   1. no petascope database is present, in which case the updates start from 0.
#   2. a ps_dbupdates table is present, in this case the updates start from the
#      number saved in the update column.
#
#  Database connection details are read from etc/petascope.properties
#
#  In case of creation of the database from scratch the update counter will start
#  from $FIRST_COUNTER update file, which is the update file of the last /upgrade/.
#
# PRECONDITIONS
#  1) PostgreSQL server must be running
#  2) etc/petascope.properties should be present, and the metadata_user should
#     have appropriate write rights in postgres.
#  3) share/rasdaman/petascope should contain the SQL update scripts
#
# Begin ENTERPRISE only part (update_reN.sql)
#
# After running the community updates, the script adopts the same principle
# with update_reN.sql scripts to be locate in the same directory. These use
# a different table, defined in PS_DBUPDATE_RE variable to store update number
# to avoid any possible conflict with community. A properties table with
# text identifiers would be better in case of future refactoring of the
# database (e.g. schemaversion_re property).
#
# End ENTERPRISE only part (update_reN.sql)

PROG=$( basename $0 )

# argument name + flags
HELP_ARG='--help'

# synopsis message
USAGE="
    usage: $PROG [$HELP_ARG]
    where:
    $HELP_ARG
        Show this message.
"
# In case the usage changes, consequently adjust these values:
MIN_ARGS=0
MAX_ARGS=2

export CODE_OK=0
export CODE_FAIL=255

# petascope settings file
SETTINGS=@sysconfdir@/petascope.properties

# petascope updateN.* scripts
export SCRIPT_DIR=@pkgdatadir@/petascope

# petascopedb tables and fields
ps_dbupdates=ps_dbupdates
DBUPDATES_ID=id
DBUPDATES_UPDATE=dbupdate

# Begin ENTERPRISE only part (table holding update number)
PS_DBUPDATE_RE=ps_dbupdates_enterprise
# End ENTERPRISE only part (table holding update number)

# first update counter in case of no existing petascopedb database
FIRST_COUNTER=8 # start from update8.sh for rasdaman 9.0

# WMS tables : special case, no need for upgrade, just mv (export for update8)
export WMS_SCHEMA_SQL="update8/wms.sql"
declare -a WMS_TABLES='' # bash cannot export arrays -> use function
export WMS_TABLES_CSV='' #

# ------------------------------------------------------------------------------
# functions
# ------------------------------------------------------------------------------

#
# logging
#
log() {
  echo "$PROG: $*"
}
logn() {
  echo -n "$PROG: $*"
}
error() {
  echo "$PROG: $*" >&2
  echo "$PROG: exiting." >&2
  exit $CODE_FAIL
}
feedback() {
  if [ $? -ne 0 ]; then
    echo failed.
    echo "$PROG: exiting." >&2
    exit $CODE_FAIL
  else
    echo ok.
  fi
}


#
# checks
#
check_sqlite() {
  which sqlite3 > /dev/null || error "SQLite missing, please add sqlite3 to the PATH."
}
check_paths() {
  if [ ! -f "$SETTINGS" ]; then
    error "petascope settings not found: $SETTINGS"
  fi
  if [ ! -d "$SCRIPT_DIR" ]; then
    error "SQL update script directory not found: $SCRIPT_DIR"
  fi
}
check_args_number() {
  if [ $1 -lt $MIN_ARGS -o $1 -gt $MAX_ARGS ]
  then
    error "$USAGE"
fi
}
check_ret() {
  if [ "$1" -ne 0 ]; then
    error "FAILED (return value $1)."
  fi
}
exec_sql() {
  $SQLITE "$*" > /dev/null
}

#
# PostgreSQL utilities
#
get_wms_tables() {
  WMS_TABLES=($( grep -i "CREATE TABLE ps_" "$SCRIPT_DIR/$WMS_SCHEMA_SQL" | grep -io "ps_.*" ))
  WMS_TABLES_CSV=$(echo \'$( echo ${WMS_TABLES[@]} | sed "s/ /','/g" )\')
}
set_dbupdate() {
  counter="$1"
  exec_sql "UPDATE $ps_dbupdates SET $DBUPDATES_UPDATE = $counter" > /dev/null 2>&1
  log "updated database to update $(( $counter-1 ))"
}

sigint_handler() {
  if [ -n $updated ]
  then
      set_dbupdate $counter
  fi
  error "user interrupt."
}

# exporting functions for child scripts
export -f log
export -f logn
export -f error
export -f feedback
export -f check_ret
export -f get_wms_tables
export -f exec_sql

# trap keyboard interrupt (control-c)
trap sigint_handler SIGINT

# ------------------------------------------------------------------------------
# work
# ------------------------------------------------------------------------------

check_paths

#
# postgres connection details
#
PS_DB=`grep metadata_url "$SETTINGS" | awk -F ":" '{print $3}' | tr -d '\n'`

#
# commands
#
export PS_DB
export SQLITE="sqlite3 $PS_DB"

# print some info
log "sqlite settings read from $SETTINGS"
log "  db: $PS_DB"

check_sqlite

#
# check command arguments
#
check_args_number $#
while [ $# -gt 0 ]
do
  case "$1" in
  $HELP | *)
      error "$USAGE"
      ;;
  esac
  shift
done

#
# insert the database updates (if present)
#

# determine the update number
exec_sql "SELECT * FROM $ps_dbupdates" 2>&1
if [ $? -ne 0 ]
then
    # no relations in the database: create from scratch
    counter="$FIRST_COUNTER"
else
    # update from the last update number
    counter=$( exec_sql "SELECT $DBUPDATES_UPDATE FROM $ps_dbupdates" | head -n 3 | tail -n 1 | awk '{print $1}' )
    if [ "$counter" -ne "$counter" ] 2>/dev/null; then
        error "couldn't determine last update from the $ps_dbupdates table"
    else
        log "database last update number is $(($counter-1))"
  fi
fi

update_files=$( ls "$SCRIPT_DIR" | grep "update[0-9]*-sqlite\\." | wc -l )
log "detected $update_files updates in $SCRIPT_DIR... "
log "starting from update counter n.$counter"


while [ -f "$SCRIPT_DIR"/update${counter}-sqlite.sql -o -f "$SCRIPT_DIR"/update${counter}-sqlite.sh ]
do
    logn "  update $counter... "

    declare -a UPDATE_FILE=($( ls $SCRIPT_DIR/update${counter}-sqlite.*  2>/dev/null ))
    EXTENSION=${UPDATE_FILE##*.}

    if [ ${#UPDATE_FILE[@]} -gt 1 ]
    then
       error "multiple update files detected (${UPDATE_FILE[@]}) for counter $counter: please remove duplicates."
    fi

    if [ "$EXTENSION" = "sql" ]
    then
        # TODO add begin/commit
        $SQLITE3 < "$UPDATE_FILE" > /dev/null 2>&1
    elif [ "$EXTENSION" = "sh" ]
    then
        # run shell script that handles the update
        "$UPDATE_FILE"
    else
        error "unsupported update-file extension '$EXTENSION': must be 'sql' or 'sh'."
    fi

    # Check if the update was successful
    ret=$?
    if [ "$ret" -ne 0 ]; then
        echo "FAILED (return value $ret)."
        error_found=1
        break # So that ps_dbupdates is updated to its partial update anyway.
    else
        echo ok.
    fi

    counter=$(( $counter+1 ))
    updated=1
done

#
# save the last update number
#
if [ -n $updated ]
then
    set_dbupdate $counter
fi


# Begin ENTERPRISE only part (determine re update number)
#
# determine the enterprise update number
#
CURR=$(exec_sql "select count(*) from $PS_DBUPDATE_RE where id=100" 2>&1)
if [ $? -ne 0 ]  ; then
    # create from scratch
    log "no enterprise udpates found, creating from scratch"
    re_counter=0
else
    # update from the last update number
    re_counter=$(exec_sql "select update from $PS_DBUPDATE_RE where id=100" | head -n 3 | tail -n 1 | awk '{print $1}')
    if [ "$re_counter" -ne "$re_counter" ] 2>/dev/null; then
        error "couldn't determine last update from the $PS_DBUPDATE_RE table"
    else
        echo "next enterprise database update: $re_counter"
    fi
fi

#
# insert the enterprise database updates
#
echo
log "executing enterprise updates:"
re_updated=0
while [ -f "$SCRIPT_DIR/update_re${re_counter}-sqlite.sql" ]; do
  logn "  update $re_counter... "
  # Note for future .sql files: do not add manual BEGIN/COMMIT transactions, they are handled by psql
  exec_sql "$SCRIPT_DIR/update_re${re_counter}-sqlite.sql" 2>&1
  # Check if the update was successful
  ret=$?
  if [ "$ret" -ne 0 ]; then
    echo "FAILED (return value $ret)."
    error_found=1
    break # So that ps_dbupdates is updated to its partial update anyway.
  else
    echo ok.
  fi
  re_counter=$(($re_counter+1))
  re_updated=1
done

#
# save the last enterprise update number
#
if [ $re_updated -eq 1 ]; then
  exec_sql "update $PS_DBUPDATE_RE set update=$re_counter where id=100" 2>&1
  log "updated enterprise database to update $((re_counter-1))"
else
  log "enterprise database already up-to-date, nothing to update."
fi

# End ENTERPRISE only part (update enterprise db)

#
# closing log
#
if [ ! -z "$error_found" ]
then
    log "database update was interrupted."
else
    if [ -z $updated ]
    then
        log "database already up-to-date, nothing to update."
    else
        log "database updated: no further update was found in ${SCRIPT_DIR}."
    fi
fi

#
# done
#
echo
log "done, exiting."
exit $CODE_OK
